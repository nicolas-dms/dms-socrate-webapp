#!/usr/bin/env node

/**
 * Script de synchronisation OpenAPI
 * 
 * Ce script r√©cup√®re le sch√©ma OpenAPI depuis le backend et le sauvegarde
 * dans le dossier du frontend pour maintenir la coh√©rence des appels API.
 * 
 * Usage:
 *   node scripts/sync-openapi.js
 *   npm run sync-api
 */

const fs = require('fs');
const path = require('path');
const https = require('https');
const http = require('http');

// Configuration
const CONFIG = {
  // URL du backend OpenAPI
  backendUrl: 'http://localhost:8000/openapi.json',
  
  // Dossier de destination dans le frontend
  outputDir: path.join(__dirname, '..', 'api-schema'),
  
  // Nom du fichier de sortie
  outputFile: 'openapi.json',
  
  // Fichier TypeScript g√©n√©r√© (optionnel)
  typesFile: 'api-types.ts',
  
  // Timeout pour les requ√™tes (en ms)
  timeout: 10000
};

/**
 * Fonction utilitaire pour faire une requ√™te HTTP/HTTPS
 */
function fetchOpenApiSchema(url) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https:');
    const httpModule = isHttps ? https : http;
    
    console.log(`üîÑ R√©cup√©ration du sch√©ma OpenAPI depuis: ${url}`);
    
    const request = httpModule.get(url, {
      timeout: CONFIG.timeout,
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'Frontend-API-Sync/1.0'
      }
    }, (response) => {
      let data = '';
      
      // V√©rification du code de statut
      if (response.statusCode !== 200) {
        reject(new Error(`Erreur HTTP ${response.statusCode}: ${response.statusMessage}`));
        return;
      }
      
      // V√©rification du type de contenu
      const contentType = response.headers['content-type'];
      if (!contentType || !contentType.includes('application/json')) {
        reject(new Error(`Type de contenu invalide: ${contentType}. Attendu: application/json`));
        return;
      }
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          console.log(`‚úÖ Sch√©ma OpenAPI r√©cup√©r√© avec succ√®s (${data.length} caract√®res)`);
          resolve(jsonData);
        } catch (error) {
          reject(new Error(`Erreur de parsing JSON: ${error.message}`));
        }
      });
    });
    
    request.on('timeout', () => {
      request.destroy();
      reject(new Error(`Timeout: Aucune r√©ponse re√ßue apr√®s ${CONFIG.timeout}ms`));
    });
    
    request.on('error', (error) => {
      reject(new Error(`Erreur de connexion: ${error.message}`));
    });
  });
}

/**
 * Cr√©e le dossier de destination s'il n'existe pas
 */
function ensureOutputDirectory() {
  if (!fs.existsSync(CONFIG.outputDir)) {
    fs.mkdirSync(CONFIG.outputDir, { recursive: true });
    console.log(`üìÅ Dossier cr√©√©: ${CONFIG.outputDir}`);
  }
}

/**
 * Sauvegarde le sch√©ma OpenAPI
 */
function saveOpenApiSchema(schema) {
  const outputPath = path.join(CONFIG.outputDir, CONFIG.outputFile);
  const formattedSchema = JSON.stringify(schema, null, 2);
  
  fs.writeFileSync(outputPath, formattedSchema, 'utf8');
  console.log(`üíæ Sch√©ma OpenAPI sauvegard√©: ${outputPath}`);
  
  // Affichage des informations du sch√©ma
  const info = schema.info || {};
  console.log(`üìã Informations du sch√©ma:`);
  console.log(`   - Titre: ${info.title || 'Non sp√©cifi√©'}`);
  console.log(`   - Version: ${info.version || 'Non sp√©cifi√©e'}`);
  console.log(`   - Description: ${info.description || 'Non sp√©cifi√©e'}`);
  
  // Compte des endpoints
  const paths = schema.paths || {};
  const endpointCount = Object.keys(paths).length;
  console.log(`   - Nombre d'endpoints: ${endpointCount}`);
  
  return outputPath;
}

/**
 * G√©n√®re des types TypeScript basiques (optionnel)
 */
function generateBasicTypes(schema) {
  const typesPath = path.join(CONFIG.outputDir, CONFIG.typesFile);
  
  let typesContent = `// Types g√©n√©r√©s automatiquement depuis le sch√©ma OpenAPI
// G√©n√©r√© le: ${new Date().toISOString()}
// Source: ${CONFIG.backendUrl}

export interface ApiInfo {
  title: string;
  version: string;
  description?: string;
}

export interface OpenApiSchema {
  openapi: string;
  info: ApiInfo;
  paths: Record<string, any>;
  components?: Record<string, any>;
}

// Sch√©ma complet export√©
export const API_SCHEMA: OpenApiSchema = `;
  
  typesContent += JSON.stringify(schema, null, 2);
  typesContent += ';\n';
  
  // Ajout de constantes utiles
  const paths = schema.paths || {};
  const endpoints = Object.keys(paths);
  
  typesContent += `
// Endpoints disponibles
export const API_ENDPOINTS = {
${endpoints.map(endpoint => `  '${endpoint.replace(/\//g, '_').toUpperCase()}': '${endpoint}'`).join(',\n')}
} as const;

// URL de base (√† configurer selon votre environnement)
export const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';
`;
  
  fs.writeFileSync(typesPath, typesContent, 'utf8');
  console.log(`üîß Types TypeScript g√©n√©r√©s: ${typesPath}`);
  
  return typesPath;
}

/**
 * G√©n√®re un fichier de m√©tadonn√©es
 */
function generateMetadata(schema) {
  const metadataPath = path.join(CONFIG.outputDir, 'metadata.json');
  
  const metadata = {
    lastSync: new Date().toISOString(),
    backendUrl: CONFIG.backendUrl,
    version: schema.info?.version || 'unknown',
    title: schema.info?.title || 'API',
    endpointCount: Object.keys(schema.paths || {}).length,
    hash: require('crypto').createHash('md5').update(JSON.stringify(schema)).digest('hex')
  };
  
  fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2), 'utf8');
  console.log(`üìä M√©tadonn√©es sauvegard√©es: ${metadataPath}`);
  
  return metadata;
}

/**
 * Fonction principale
 */
async function main() {
  try {
    console.log('üöÄ D√©marrage de la synchronisation OpenAPI...\n');
    
    // V√©rification de la connectivit√© backend
    console.log('üîç V√©rification de la connectivit√© backend...');
    
    // R√©cup√©ration du sch√©ma
    const schema = await fetchOpenApiSchema(CONFIG.backendUrl);
    
    // Validation basique du sch√©ma
    if (!schema.openapi && !schema.swagger) {
      throw new Error('Le fichier r√©cup√©r√© ne semble pas √™tre un sch√©ma OpenAPI/Swagger valide');
    }
    
    // Cr√©ation du dossier de destination
    ensureOutputDirectory();
    
    // Sauvegarde du sch√©ma
    const schemaPath = saveOpenApiSchema(schema);
    
    // G√©n√©ration des types TypeScript
    const typesPath = generateBasicTypes(schema);
    
    // G√©n√©ration des m√©tadonn√©es
    const metadata = generateMetadata(schema);
    
    console.log('\n‚úÖ Synchronisation termin√©e avec succ√®s!');
    console.log(`üìÇ Fichiers g√©n√©r√©s dans: ${CONFIG.outputDir}`);
    console.log(`   - ${CONFIG.outputFile} (sch√©ma OpenAPI)`);
    console.log(`   - ${CONFIG.typesFile} (types TypeScript)`);
    console.log(`   - metadata.json (m√©tadonn√©es)`);
    
    // Suggestion d'utilisation
    console.log('\nüí° Utilisation sugg√©r√©e:');
    console.log('   - Importez les types: import { API_ENDPOINTS, API_BASE_URL } from "./api-schema/api-types";');
    console.log('   - Utilisez les endpoints: fetch(`${API_BASE_URL}${API_ENDPOINTS.USERS}`);');
    console.log('   - Ajoutez le script √† vos t√¢ches de build pour maintenir la synchronisation');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation:');
    console.error(`   ${error.message}`);
    
    // Suggestions de r√©solution
    console.log('\nüîß Suggestions de r√©solution:');
    console.log('   1. V√©rifiez que le backend est d√©marr√© sur http://localhost:8000');
    console.log('   2. V√©rifiez que l\'endpoint /openapi.json est accessible');
    console.log('   3. V√©rifiez votre connexion r√©seau');
    console.log(`   4. Testez manuellement: curl ${CONFIG.backendUrl}`);
    
    process.exit(1);
  }
}

// Gestion des arguments de ligne de commande
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log(`
Script de synchronisation OpenAPI

Usage:
  node scripts/sync-openapi.js [options]

Options:
  --help, -h     Affiche cette aide
  --url <url>    URL personnalis√©e du backend (d√©faut: ${CONFIG.backendUrl})
  --output <dir> Dossier de sortie (d√©faut: ${CONFIG.outputDir})

Exemples:
  node scripts/sync-openapi.js
  node scripts/sync-openapi.js --url http://localhost:3001/openapi.json
  node scripts/sync-openapi.js --output ./src/api-schema
`);
  process.exit(0);
}

// Gestion de l'URL personnalis√©e
const urlIndex = process.argv.indexOf('--url');
if (urlIndex !== -1 && process.argv[urlIndex + 1]) {
  CONFIG.backendUrl = process.argv[urlIndex + 1];
}

// Gestion du dossier de sortie personnalis√©
const outputIndex = process.argv.indexOf('--output');
if (outputIndex !== -1 && process.argv[outputIndex + 1]) {
  CONFIG.outputDir = path.resolve(process.argv[outputIndex + 1]);
}

// Ex√©cution du script
if (require.main === module) {
  main();
}

module.exports = { main, CONFIG };
